## ===================================================
## The functions in this file were modified from the
## original code from Rand Wilcox:
## http://dornsife.usc.edu/labs/rwilcox/software/
## ===================================================

shifthd<-function(x,y,nboot=200){
#
#   Compute confidence intervals for the difference between deciles
#   of two independent groups. The simultaneous probability coverage is .95.
#   The Harrell-Davis estimate of the qth quantile is used.
#   The default number of bootstrap samples is nboot=200
#
#   The results are stored and returned in a 9 by 5 matrix,
#   the ith row corresponding to the i/10 quantile.
#   The first column is the lower end of the confidence interval.
#   The second column is the upper end.
#   The third column is the estimated difference between the deciles
#   (second group minus first).
#
# Modified from Rallfun-v31: GAR - University of Glasgow - 2016-06-22
# simplified inputs/outputs to make independent figures
# changed difference to x-y instead of y-x for consistency across functions
# now outputs confidence intervals, similarly to shiftdhd
# changed labels to reflect nature of data: 'groups' here, 'conditions' for shiftdhd
# now returns a tibble for use with ggplot2
x<-x[!is.na(x)]
y<-y[!is.na(y)]
crit<-80.1/(min(length(x),length(y)))^2+2.73
m<-matrix(0,9,5)
for (d in 1:9){
q<-d/10
data<-matrix(sample(x,size=length(x)*nboot,replace=TRUE),nrow=nboot)
bvec<-apply(data,1,hd,q)
sex<-var(bvec)
data<-matrix(sample(y,size=length(y)*nboot,replace=TRUE),nrow=nboot)
bvec<-apply(data,1,hd,q)
sey<-var(bvec)
m[d,1]<-hd(x,q)
m[d,2]<-hd(y,q)
m[d,3]<-m[d,1]-m[d,2]
m[d,4]<-m[d,3]-crit*sqrt(sex+sey)
m[d,5]<-m[d,3]+crit*sqrt(sex+sey)
}
out<-as_tibble(data.frame(m))
names(out)<-c('group1','group2','difference','ci_lower','ci_upper')
out
}

shiftdhd<-function(x,y,nboot=200){
#
#   Compute confidence intervals for the difference between deciles
#   of two dependent groups. The simultaneous probability coverage is .95.
#   The Harrell-Davis estimate of the qth quantile is used.
#   The default number of bootstrap samples is nboot=200
#
#   The results are stored and returned in a 9 by 5 matrix,
#   the ith row corresponding to the i/10 quantile.
#   The first column is the lower end of the confidence interval.
#   The second column is the upper end.
#   The third column is the estimated difference between the deciles
#   (second group minus first).
#   The fourth column contains the estimated standard error.
#
#   No missing values are allowed.
#
#   If the goal is to use an alpha value different from .05,
#   use the function qcomdhd or  qdec2ci
#
# Modified from Rallfun-v31: GAR - University of Glasgow - 2016-06-22
# simplified inputs/outputs for use with new plot.sf()
# changed labels to reflect nature of data: 'conditions' here, 'groups' for shifthd
# now returns a tibble for use with ggplot2
xy=elimna(cbind(x,y))
x=xy[,1]
y=xy[,2]
crit<-37/length(x)^(1.4)+2.75
m<-matrix(0,9,5)
data<-matrix(sample(length(x),size=length(x)*nboot,replace=TRUE),nrow=nboot)
xmat<-matrix(x[data],nrow=nboot,ncol=length(x))
ymat<-matrix(y[data],nrow=nboot,ncol=length(x))
for (d in 1:9){
q<-d/10
bvec<-apply(xmat,1,hd,q)-apply(ymat,1,hd,q)
se<-sqrt(var(bvec))
m[d,1]=hd(x,q)
m[d,2]=hd(y,q)
m[d,3]<-m[d,1]-m[d,2]
m[d,4]<-m[d,3]-crit*se
m[d,5]<-m[d,3]+crit*se
}
out<-as_tibble(data.frame(m))
names(out)<-c('condition1','condition2','difference','ci_lower','ci_upper')
out
}

qcomhd<-function(x,y,q=c(.1,.25,.5,.75,.9),nboot=2000,alpha=.05){
#
# Compare quantiles using pb2gen
# via hd estimator. Tied values are allowed.
# When comparing lower or upper quartiles, both power and the probability of Type I error
# compare well to other methods that have been derived.
# q: can be used to specify the quantiles to be compared
# q defaults to comparing the .1,.25,.5,.75, and .9 quantiles
#   Function returns p-values and critical p-values based on Hochberg's method.
#
# Modified from Rallfun-v31: GAR - University of Glasgow - 2016-09-30
# simplified inputs to make independent figures using `plot.pbsf`
# changed labels to reflect nature of data: 'groups' here, 'conditions' for `Dqcomhd`
# now returns a tibble for use with ggplot2
m <- matrix(NA,nrow=length(q),ncol=9)
for(qi in 1:length(q)){
m[qi,1]=q[qi]
m[qi,2]=hd(x,q=q[qi])
m[qi,3]=hd(y,q=q[qi])
m[qi,4]=m[qi,2]-m[qi,3]
temp=pb2gen(x,y,nboot=nboot,est=hd,q=q[qi],SEED=FALSE,alpha=alpha,pr=FALSE)
m[qi,5]=temp$ci[1]
m[qi,6]=temp$ci[2]
m[qi,8]=temp$p.value
}
temp=order(m[,8],decreasing=TRUE)
zvec=alpha/c(1:length(q))
m[temp,7]=zvec
for(qi in 1:nrow(m)){
if(m[temp[qi],8]>m[temp[qi],7]) m[temp[qi],9]=0
if(m[temp[qi],8]<=m[temp[qi],7]) m[temp[qi],9]=1
}
out<-as_tibble(data.frame(m))
names(out)<-c('q','group1','group2','difference','ci_lower','ci_upper','p_crit','p-value','sig')
out
}

Dqcomhd<-function(x,y,q=c(.1,.25,.5,.75,.9),nboot=1000,alpha=.05,na.rm=TRUE){
#
# Compare the quantiles of the marginal distributions associated with  two dependent groups
# via hd estimator. Tied values are allowed.
# When comparing lower or upper quartiles, both power and the probability of Type I error
# compare well to other methods have been derived.
#
#  x: data for group 1
#  y: data for group 2
#  q: the quantiles to be compared
#  nboot: Number of bootstrap samples
#
# Modified from Rallfun-v31: GAR - University of Glasgow - 2016-09-30
# simplified inputs to make independent figures using `plot.pbsf`
# changed labels to reflect nature of data: 'conditions' here, 'groups' for `qcomhd`
# now returns a tibble for use with ggplot2
# automatically removes missing values
if(na.rm){
xy=elimna(cbind(x,y))
x=xy[,1]
y=xy[,2]
}
m=matrix(NA,nrow=length(q),ncol=9)
for(qi in 1:length(q)){
m[qi,1]=q[qi]
m[qi,2]=hd(x,q=q[qi])
m[qi,3]=hd(y,q=q[qi])
m[qi,4]=m[qi,2]-m[qi,3]
if(na.rm){
temp=bootdpci(x,y,est=hd,q=q[qi],dif=FALSE,plotit=FALSE,pr=FALSE,nboot=nboot,alpha=alpha,SEED=FALSE)
output[qi,5]=temp$output[1,5]
output[qi,6]=temp$output[1,6]
output[qi,8]=temp$output[1,3]
}
if(!na.rm){
temp=rmmismcp(x,y,est=hd,q=q[qi],plotit=FALSE,pr=FALSE,nboot=nboot,alpha=alpha,SEED=FALSE)
m[qi,5]=temp$output[1,6]
m[qi,6]=temp$output[1,7]
m[qi,8]=temp$output[1,4]
}
}
temp=order(m[,8],decreasing=TRUE)
zvec=alpha/c(1:length(q))
m[temp,7]=zvec
for(qi in 1:nrow(m)){
if(m[temp[qi],8]>m[temp[qi],7]) m[temp[qi],9]=0
if(m[temp[qi],8]<=m[temp[qi],7]) m[temp[qi],9]=1
}
out<-as_tibble(data.frame(m))
names(out)<-c('q','condition1','condition2','difference','ci_lower','ci_upper','p_crit','p-value','sig')
out
}

q1469<-function(x){
#
#  Estimate the deciles for the data in vector x
#  using the Harrell-Davis estimate of the qth quantile
# Modified from `deciles` to return only quantiles 1:4 & 6:9
# GAR, University of Glasgow, 2016-07-14
xs<-sort(x)
n<-length(x)
vecx<-seq(along=x)
xq<-0
todo<-c(1:4,6:9)
for (qi in 1:length(todo)){
q<-todo[qi]/10
m1<-(n+1)*q
m2<-(n+1)*(1-q)
wx<-pbeta(vecx/n,m1,m2)-pbeta((vecx-1)/n,m1,m2)  # W sub i values
xq[qi]<-sum(wx*xs)
}
xq
}

quantiles_pbci<-function(x,q=seq(1,9)/10,nboot=2000,alpha=0.05){
# Merges `deciles` & `qcipb` from `Rallfun-v31.txt`
# Compute percentile bootstrap confidence intervals of quantiles, `quant`,
# estimated using the Harrell-Davis estimator.
# Default to deciles
# GAR, University of Glasgow, 2016-07-15
low<-round((alpha/2)*nboot)
up<-nboot-low
low<-low+1
x=elimna(x)
nq=length(q)
output=matrix(NA,ncol=4,nrow=nq)
dimnames(output)=list(NULL,c("quantile","est_q","ci.low","ci.up"))
bdata<-matrix(sample(x,size=length(x)*nboot,replace=TRUE),nrow=nboot) # bootstrap samples
for (qi in 1:nq){
output[qi,1]=q[qi]
output[qi,2]=hd(x,q=q[qi])
bvec<-apply(bdata,1,hd,q=q[qi])
bvec<-sort(bvec)
output[qi,3]=bvec[low]
output[qi,4]=bvec[up]
}
output <- data.frame(output)
print(output)
}
